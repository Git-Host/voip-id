####### Global Parameters #########

debug=3
log_stderror=no
log_facility=LOG_LOCAL0

fork=yes
children=8

/* uncomment the following lines to enable debugging */
#debug=6
#fork=no
#log_stderror=yes

/* uncomment the next line to enable the auto temporary blacklisting of 
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns 
   lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases
   based on revers DNS on IPs */
auto_aliases=no

listen=udp:192.168.1.150:5060   # CUSTOMIZE ME

disable_tcp=no
listen=tcp:192.168.1.150:5060   # CUSTOMIZE ME 

disable_tls=yes
listen=tls:192.168.1.150:5061   # CUSTOMIZE ME
tls_verify_server=1
tls_verify_client = 1
tls_require_client_certificate = 0
tls_method = TLSv1
tls_certificate = "/usr/etc/opensips/tls/server/server-cert.pem"
tls_private_key = "/usr/etc/opensips/tls/server/server-privkey.pem"
tls_ca_list = "/usr/etc/opensips/tls/server/server-calist.pem"


####### Modules Section ########

#set module path
mpath="/usr/local/lib/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
#modparam("tm", "fr_timer", 5)
#modparam("tm", "fr_inv_timer", 30)
#modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### MYSQL module
loadmodule "db_mysql.so"

#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)
modparam("uri", "db_url", "mysql://root:password@localhost/opensips") # CUSTOMIZE ME

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "db_mode",   2)
modparam("usrloc", "db_url", "mysql://root:password@localhost/opensips") # CUSTOMIZE ME

#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")
modparam("registrar", "received_avp", "$avp(received_nh)")
/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)

#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure the enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)
modparam("acc", "failed_transaction_flag", "ACC_FAILED")
/* account triggers (flags) */
modparam("acc", "db_flag", "ACC_DO")
modparam("acc", "db_missed_flag", "ACC_MISSED")
modparam("acc", "log_flag", "ACC_DO")
modparam("acc", "log_missed_flag", "ACC_MISSED")
modparam("acc", "log_extra", "src_uri=$fU;caller_domain=$fd;dst_uri=$rU;callee_domain=$rd")
modparam("acc", "db_extra", "src_uri=$fU;caller_domain=$fd;dst_uri=$rU;callee_domain=$rd")
modparam("acc", "db_url", "mysql://root:password@localhost/opensips") # CUSTOMIZE ME

#### AUTHentication modules
loadmodule "auth.so"
loadmodule "auth_db.so"
modparam("auth_db", "calculate_ha1", 0)
#modparam("auth_db", "password_column", "password")
modparam("auth_db", "password_column", "ha1")
modparam("auth_db", "use_domain", 1)
modparam("auth_db", "db_url", "mysql://root:password@localhost/opensips") # CUSTOMIZE ME
modparam("auth_db", "load_credentials", "")

#### ALIAS module
loadmodule "alias_db.so"
#modparam("alias_db", "user_column", "username")
#modparam("alias_db", "domain_column", "domain")
#modparam("alias_db", "alias_user_column", "alias_username")
#modparam("alias_db", "alias_domain_column", "")
modparam("alias_db", "db_url", "mysql://root:password@localhost/opensips") # CUSTOMIZE ME

#### DOMAIN module
loadmodule "domain.so"
modparam("domain", "db_url", "mysql://root:password@localhost/opensips") # CUSTOMIZE ME
modparam("domain", "db_mode", 1)   # Use caching
modparam("auth_db|usrloc|uri", "use_domain", 1)

####  NAT modules
loadmodule "nathelper.so"
modparam("nathelper", "natping_interval", 20)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "received_avp", "$avp(received_nh)")

#### RTP Proxy
loadmodule "rtpproxy.so"
modparam("rtpproxy", "rtpproxy_sock", "udp:127.0.0.1:12221")

#### Dialplan module
loadmodule "dialplan.so"
modparam("dialplan", "db_url", "mysql://root:password@localhost/opensips") # CUSTOMIZE ME

#### Group module
loadmodule "group.so"
modparam("group", "db_url", "mysql://root:password@localhost/opensips") # CUSTOMIZE ME

#### presence module
loadmodule "presence.so"
#loadmodule "presence_xml.so"
modparam("presence", "db_url", "mysql://root:password@localhost/opensips") # CUSTOMIZE ME
#modparam("presence_xml", "force_active", 1)

#### prefix2domain module
loadmodule "pdt.so"
modparam("pdt", "db_url", "mysql://root:password@localhost/opensips") # CUSTOMIZE ME

#### ENUM module
loadmodule "enum.so"
modparam("enum", "domain_suffix", "e164.or.id.")
modparam("enum", "i_enum_suffix", "e164.or.id.")

####### Routing Logic ########

# main request routing logic

route {
	force_rport(); #nathelper
	if (nat_uac_test("23")) { #nathelper
		if (is_method("REGISTER")) {
			fix_nated_register(); #nathelper
			setbflag(NAT);
		} else {
			fix_nated_contact(); #nathelper
			setflag(NAT);
		}
	}
 	

	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if (has_totag()) {
		# sequential request withing a dialog should
		# take the path determined by record-routing
		if (loose_route()) {
			if (is_method("BYE")) {
				setflag(ACC_DO); # do accounting ...
				setflag(ACC_FAILED); # ... even if the transaction fails
			} else if (is_method("INVITE")) {
				# even if in most of the cases is useless, do RR for
				# re-INVITEs alos, as some buggy clients do change route set
				# during the dialog.
				record_route();
			}

			if (check_route_param("nat=yes")) {
				setflag(NAT);
			}

			# route it out to whatever destination was set by loose_route()
			# in $du (destination URI).
			route(relay);
		} else {
			
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					# non loose-route, but stateful ACK; must be an ACK after 
					# a 487 or e.g. 404 from upstream server
					t_relay();
					exit;
				} else {
					# ACK without matching transaction ->
					# ignore and discard
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			t_relay();
		}
		exit;
	}

	t_check_trans();

	if ( !(is_method("REGISTER")  ) ) {
		if (is_from_local()) {
			# authenticate if from local subscriber
			# authenticate all initial non-REGISTER request that pretend to be
			# generated by local subscriber (domain from FROM URI is local)
			if (!proxy_authorize("", "subscriber")) {
				proxy_challenge("", "0");
				exit;
			}

			if (!db_check_from()) {
				sl_send_reply("403","Forbidden auth ID");
				exit;
			}

			consume_credentials();
			# caller authenticated
			
		} else {
			# if caller is not local, then called number must be local
			
			if (!is_uri_host_local()) {
				send_reply("403","Rely forbidden");
				exit;
			}
		}

	}

	# preloaded route checking
	if (loose_route()) {
		xlog("L_ERR", "Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]\n");
		if (!is_method("ACK")) {
			sl_send_reply("403","Preload Route denied");
		}
		exit;
	}

	# record routing
	if (!is_method("REGISTER|MESSAGE")) {
		record_route();
	}

	# account only INVITEs
	if (is_method("INVITE")) {
		setflag(ACC_DO); # do accounting
	}

	#if (!is_uri_host_local()) {
	#	append_hf("P-hint: outbound\r\n"); 
	#	
	#	# if you have some interdomain connections via TLS
	#	## CUSTOMIZE ME IF NEEDED
	#	##if ($rd=="tls_domain1.net"
	#	## || $rd=="tls_domain2.net"
	#	##) {
	#	##	force_send_socket(tls:192.168.1.150:5061); # CUSTOMIZE ME IF NEEDED
	#	##}
	#	
	#	route(relay);
	#	exit;
	#}

	if (is_method("REGISTER")) {
		# authenticate the REGISTER requests
		if (!www_authorize("", "subscriber")) {
			www_challenge("", "0");
			exit;
		}
		
		if (!db_check_to()) {
			sl_send_reply("403","Forbidden auth ID");
			exit;
		}

		if ( proto==TCP || proto==TLS || 0 ) {
			setflag(TCP_PERSISTENT);
		}

		if (!save("location")) {
			sl_reply_error();
		}

		exit;
	}

	# handle presence
	if (is_method("PUBLISH|SUBSCRIBE")) {
		route(handle_presence);
		exit;
	}

	if ($rU==NULL) {
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	# apply DB based aliases
	alias_db_lookup("dbaliases");

	if (isbflagset(NAT)) {
		setflag(NAT);
	}

	# handling dialplans from database
	#if (dp_translate("0", "$rU/$ru")) {
	#	xlog("L_INFO", "$rU/$ru translated to var $avp(dest)\n");
	#	$var(dp) = 1;
	#}
	#if (!is_uri_host_local() || $var(dp)==1) {
	#	
	#	xlog("L_INFO", "ROUTE TO GATEWAY $(hdr(User-Agent))\n");
	#	route(gateway);
	#}

	# prefix to domain conversion
	if (prefix2domain()) {
		xlog("L_INFO", "prefix found dialing $ru\n");
		route(relay);
		exit;
	}

	# do lookup with method filtering
	if (!lookup("location","m")) {
		route(enum);

		t_newtran();

		if (is_method("MESSAGE")) {
			xlog("L_INFO", "storing message for $ru\n");
			t_reply("202", "User offline");
			exit;
		}

		t_reply("404", "Not Found");
		exit;
	}

	# when routing via usrloc, log the missed calls also
	setflag(ACC_MISSED);
	route(relay);
}

route[handle_presence] {
	if(!t_newtran()){
		sl_reply_error();
		exit;
	}

	if (is_method("PUBLISH")) {
		handle_publish();
	} else

	if (is_method("SUBSCRIBE")) {
		handle_subscribe();
	}

	exit;
}

route[enum] {
	if (!is_method("INVITE")) {
		return;
	}

	xlog("L_INFO", "enum lookup started\n");

	# ENUM e164.or.id
	if (enum_query("e164.or.id")) {
		# sl_send_reply("302","ENUM Redirect");
		xlog("L_INFO", "enum lookup e164.or.id found $ru\n");
		route(relay);
		exit;
	}

	# ENUM e164.org
	#if (enum_query("e164.org")) {
	#	# sl_send_reply("302","ENUM Redirect");
	#	route(relay);
	#	exit;
	#}

	# ENUM e164.arpa
	#if (enum_query("e164.arpa")) {
	#	# sl_send_reply("302","ENUM Redirect");
	#	route(relay);
	#	exit;
	#}

	exit;
}

route[gateway] {
	#if ($ru=~"^sip:08.*" || $ru=~"^sip:[2-9].*") {
	#	if (db_is_user_in("Credentials", "level_1") || db_is_user_in("Credentials", "level_2") || db_is_user_in("Credentials", "level_3")) {
	#		xlog("L_INFO", "ROUTE TO LOCAL\n");
	#		route(relay);
	#	} else {
	#		sl_send_reply("403", "No permission for local or mobile");
	#		exit();
	#	}
	#}
	#if ($ru=~"^sip:0[2-7].*") {
	#	if (db_is_user_in("Credentials", "level_2") || db_is_user_in("Credentials", "level_3")) {
	#		xlog("L_INFO", "ROUTE TO LONG DISTANCE\n");
	#		route(relay);
	#	} else {
	#		sl_send_reply("403", "No permission for long distance");
	#		exit();
	#	}
	#}
	#if ($ru=~"^sip:\+[1-9].*") {
	#	if (db_is_user_in("Credentials", "level_3")) {
	#		xlog("L_INFO", "ROUTE TO INTERNATIONAL\n");
	#		route(relay);
	#	} else {
	#		sl_send_reply("403", "No permission for international");
	#		exit();
	#	}
	#}
	#xlog("L_INFO", "ROUTE NO PERMISSIONS\n");
	#sl_send_reply("403", "Not enough permissions");

	route(relay);

	exit;
}

route[relay] {

	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		
		if (isflagset(NAT)) {
			if (has_body("application/sdp")) {
				rtpproxy_offer("ro");
			}
		}

		t_on_branch("per_branch_ops");
		t_on_reply("handle_nat");
		t_on_failure("missed_call");
	}

	if (isflagset(NAT)) {
		add_rr_param(";nat=yes");
	}

	if (!t_relay()) {
		send_reply("500","Internal Error");
	}
	exit;
}

branch_route[per_branch_ops] {
	xlog("L_INFO", "new branch at $ru\n");
}

onreply_route[handle_nat] {
	if (nat_uac_test("1")) {
		fix_nated_contact();
	}
	if ( isflagset(NAT) ) {
		if (has_body("application/sdp")) {
			rtpproxy_answer("ro");
		}
	}
	xlog("L_INFO", "incoming reply\n");
}

failure_route[missed_call] {
	if (t_was_cancelled()) {
		exit;
	}

	# uncomment the following lines if you want to block client 
	# redirect based on 3xx replies.
	##if (t_check_status("3[0-9][0-9]")) {
	##t_reply("404","Not found");
	##	exit;
	##}
}
